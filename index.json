[{"uri":"/ProjectExamples/index.html","title":"index","content":"Hello! My name is Paula Rueda and this is a page I created to publish different projects I\u0027ve done over the years. Please feel free to check them under Documentation. \r\n\r\n\r\n"},{"uri":"/ProjectExamples/test.html","title":"test","content":"\n#load \u0022YahooFinance.fsx\u0022\n\nopen YahooFinance\n\nlet twnk = YahooFinance.PriceHistory(\u0022TWNK\u0022)\n\ntwnk.[..3]\n|\u003EList.take 3 \n\n#r \u0022nuget: Plotly.NET,2.0.0-preview.17\u0022\n\nopen Plotly.NET\ntwnk\n|\u003E List.map(fun day -\u003E day.Date, day.AdjustedClose)\n|\u003EChart.Line\n|\u003EGenericChart.toChartHTML\n"},{"uri":"/ProjectExamples/test4.html","title":"test4","content":" \n//### $Signal$ $Analysis$\n\n//This project main strategy consists of shorting stocks with a high price and going long on those with low prices. \n//This strategy is supported by the idea that stocks with low prices will generate higher returns to compensate for the higher degree of risk that usually underperforming stocks have.\n// The price per Share (Prc) signal is going to be use as the predictor of future returns. It is constructed as the absolute value of the price or bid/ask average and is classified as a size factor\n\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n#r \u0022nuget: Plotly.NET,2.0.0-preview.17\u0022\n#r \u0022nuget: Plotly.NET.Interactive,2.0.0-preview.17\u0022\n\nopen System\nopen FSharp.Data\nopen FSharp.Stats\nopen Plotly.NET \n\n// Set dotnet interactive formatter to plaintext\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\nFormatter.SetPreferredMimeTypesFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\n// Make plotly graphs work with interactive plaintext formatter\nFormatter.SetPreferredMimeTypesFor(typeof\u003CGenericChart.GenericChart\u003E,\u0022text/html\u0022)\n\nlet [\u003CLiteral\u003E] ResolutionFolder = __SOURCE_DIRECTORY__\nEnvironment.CurrentDirectory \u003C- ResolutionFolder\n\n#load \u0022Portfolio.fsx\u0022\nopen Portfolio\n#load \u0022Common.fsx\u0022\nopen Common\n\n#load \u0022YahooFinance.fsx\u0022\nopen YahooFinance\n\n#r \u0022nuget: DiffSharp-lite\u0022\nopen DiffSharp\n\nlet [\u003CLiteral\u003E] IdAndReturnsFilePath = \u0022data/id_and_return_data.csv\u0022\nlet [\u003CLiteral\u003E] MySignalFilePath = \u0022data/prc.csv\u0022\nlet strategyName = \u0022Price-per-Share\u0022\nlet ff3 = French.getFF3 Frequency.Monthly\n\ntype IdAndReturnsType = \n    CsvProvider\u003CSample=IdAndReturnsFilePath,\n                Schema=\u0022obsMain(string)-\u003EobsMain=bool,exchMain(string)-\u003EexchMain=bool\u0022,\n                ResolutionFolder=ResolutionFolder\u003E\n\ntype MySignalType = \n    CsvProvider\u003CMySignalFilePath,\n                ResolutionFolder=ResolutionFolder\u003E\n                \nlet idAndReturnsCsv = IdAndReturnsType.GetSample()\nlet mySignalCsv = MySignalType.GetSample()\n\nlet idAndReturnsRows = idAndReturnsCsv.Rows |\u003E Seq.toList\nlet mySignalRows = mySignalCsv.Rows |\u003E Seq.toList\n\n// Number of stocks per month in the signal data \nlet countMySignalRows (rows: list\u003CMySignalType.Row\u003E) =\n    let byMonth =\n        rows\n        |\u003E List.groupBy (fun row -\u003E row.Eom)\n        |\u003E List.sortBy (fun (month, rows) -\u003E month)\n    [ for (month, rows) in byMonth do\n        let nStocks = \n            rows\n            |\u003E List.map (fun row -\u003E row.Id)\n            |\u003E List.distinct\n            |\u003E List.length\n        month, nStocks ]\n\nmySignalRows\n|\u003E countMySignalRows\n|\u003E List.truncate 10\n\nmySignalRows\n|\u003E countMySignalRows\n|\u003E Chart.Column\n|\u003E Chart.withXAxisStyle (TitleText=\u0022Month\u0022)\n|\u003E Chart.withYAxisStyle (TitleText=\u0022Number of Stocks\u0022)\n|\u003E Chart.withTitle(\u0022Number of stocks per month in the signal data\u0022)\n|\u003E Chart.withTemplate ChartTemplates.lightMirrored\n|\u003E Chart.withSize(400.,400.)"},{"uri":"/ProjectExamples/YahooFinance.html","title":"YahooFinance","content":"(**\n[![Script](img/badge-script.svg)](/Teaching//YahooFinance.fsx)\n\nBased on code from [https://github.com/aexsalomao/YahooFinance/](https://github.com/aexsalomao/YahooFinance/)\n\n*)\n#r \u0022nuget: FSharp.Data\u0022\n\nopen System\nopen FSharp.Data\n\ntype Interval = \n    | Daily\n    | Weekly\n    | Monthly\n    override this.ToString() = \n        match this with\n        | Daily -\u003E \u00221d\u0022\n        | Weekly -\u003E \u00221wk\u0022\n        | Monthly -\u003E \u00221mo\u0022\n\ntype PriceObs = \n    { Symbol : string\n      Date : DateTime\n      Open : float\n      High : float\n      Low : float\n      Close : float\n      AdjustedClose : float\n      Volume : float }\n\ntype private PriceObsCsv = CsvProvider\u003CSample=\u0022Date (date),Open (float),High (float),Low (float), Close (float),AdjClose (float),Volume (float)\u0022\u003E\nlet private cc = System.Net.CookieContainer()\n\ntype YahooFinance =\n    static member PriceHistory(symbol: string,?startDate: DateTime,?endDate: DateTime,?interval: Interval) =\n        let startDate = defaultArg startDate (DateTime.Now.AddYears(-1))\n        let endDate = defaultArg endDate (DateTime.Now)\n        let interval = defaultArg interval Interval.Monthly\n\n        let generateYahooUrl (symbol: string) (startDate: DateTime) (endDate: DateTime) (interval: Interval) =\n            let time dt = DateTimeOffset(dt).ToUnixTimeSeconds()\n            $\u0022https://query1.finance.yahoo.com/v7/finance/download/{symbol}?\u0022 \u002B\n            $\u0022period1={time startDate}\u0026period2={time endDate}\u0026interval={interval}\u0022 \u002B\n            $\u0022\u0026events=history\u0026includeAdjustedClose=true\u0022\n        \n        let url = generateYahooUrl symbol startDate endDate interval\n        let req = Http.RequestString(\n                        url = url, \n                        httpMethod = \u0022GET\u0022,\n                        query = [\u0022format\u0022,\u0022csv\u0022],\n                        headers = [HttpRequestHeaders.Accept HttpContentTypes.Csv],\n                        silentHttpErrors = false,\n                        cookieContainer = cc)\n        PriceObsCsv.Parse(req).Rows\n        |\u003E Seq.map (fun x -\u003E \n            { Symbol = symbol \n              Date = x.Date\n              Open = x.Open\n              High = x.High\n              Low = x.Low\n              Close = x.Close \n              AdjustedClose = x.AdjClose\n              Volume = x.Volume })\n        |\u003E Seq.toList\n"}]